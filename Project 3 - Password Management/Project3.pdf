#Name: Loc Nguyen
#Date: 04/13/2023
'''Objective: 
main() function:
1. Create two lists (you choose how to enter/initialize these two lists) usernames and passwords,
e.g. usernames = ['lyang', 'kSimon', 'danny', ...], passwords = ['sheCodes#123',
'catchAllGood1%', '@my2Choices', ...]. The usernames and passwords must meet the following
requirements: Usernames must contain letters (lowercase as well as uppercases can be used).
Usernames are unique (i.e. no two usernames can be the same.) Passwords must meet the
following requirements: (1) at least 8 characters, (2) contains at least one lowercase letter, one
uppercase letter, one digit, and one special character (non-letter or digit). We assume the
usernames and passwords in the initialized lists have met the requirements (your responsibility
to ensure that.)
2. Zip two lists to form a dictionary of usernames/passwords with the username as the key.
3. Call functions (see below) to perform: (1) login users; acknowledge if login successful or not. (2)
change passwords; acknowledge if password change successful or not. (3) create new user; if
successful, welcome the new user. If not, acknowledge it.
The following functions are needed:
1. A function to authenticate/login a user, i.e. it takes the dictionary as a parameter, prompts for a
username, if username not exist, issue error message, but do allow 3 attempts before the
function returns False (unsuccessful). If the username is found, asks for a password. Login the
user if password matches, allow 3 tries. If successful, the function returns a Boolean value True.
2. A function to create a new user. Again, the function should take the dictionary as parameter,
prompts for a username (verify the username meets the above requirements, i.e. in valid format
and not duplicate with existing one) and then a password (verify that the password meets the
above requirements). If one of them not valid (okay for one attempt only, but you may design
multiple attempts if you wish - optional) the function returns a None value, if both the
username and passwords are valid, the function returns the username (so that in main()
function, you could acknowledge, welcome ....).
3. A function to update the password. Again, it takes the dictionary as the parameter. Its asks for
the username and password of the existing user, login first. If login successful, asks for new
password, verify that the password meets the requirement, and updates it, then the function
terminates by returning a True value. If any issue (i.e. can't login or new password doesn't meet
the requirements etc.) the function terminates by returning a False value without updating the
dictionary.
Required test run: one test run that covers all (primary) features described above. Initialize the
username and password lists as follows, then try to login a user, add a new user, and update password.
In each action (login/add/update) try both scenarios (i.e. successful or unsuccessful).
usernames = ['lyang', 'kSimon', 'danny', 'tomatcpp', 'csDept', 'CoScpp', 'broncoWins', 'ponyExp',
'BldgAndRooms', 'helloKitty' ] #note: you may use different usernames, but make sure all are valid.
passwords = ['sheCodes#123', 'catchAllGood1%', '@my2Choices', '123abc;;;', 'Hello2Monday$',
'GoodFriday@Cpp2', 'CS2520@Python', 'JavaIsHot2!', '2ManyRainingDays!', '1Startup@Starbucks']
#note: you may use different passwords, but make sure all are valid.'''

#Project 3 Task 1
#import typing to restrict what type of parameter to pass to function/method
from typing import Dict
import re
#function to check for special characters using regex
def specialChecker(string):
    regex = re.compile('[@_!#$%^&*()<>?/\|}{~:]')
    #use search and find if there's at least 1 special char in string. False if can't find and True if found
    if(regex.search(string)==None):
        return False
    else:
        return True
def pwdChecker(password):
    #check for length at least 8 char
    length = len(password)
    #count and check for uppercase
    uppercase = sum(1 for char in password if char.isupper())
    #count and check for lowercase
    lowercase = sum(1 for char in password if char.islower())
    #count and check for number
    digit = sum (1 for char in password if char.isdigit())
    #check for special char
    specialChar = specialChecker(password)
    #if all requirement are satisfied return True, else return False
    if(length>=8 and uppercase>0 and lowercase>0 and digit>0 and specialChar==True):
        return True
    else:
        return False
#function to log user in
def authenticate(loginDict :Dict):
    print("Log in below")
    #allow 3 tries
    counter = 0
    while counter<3:
        global usernameInput
        usernameInput = input("Please enter your username: ")
        #if usrname is in dict as key, prompt password
        if usernameInput in loginDict.keys():
            #allow 3 tries
            counter = 0
            #access dictionary using key to get password to compare later
            realPwd = loginDict[usernameInput]
            while counter<3:
                pwdInput = input("Please enter your password: ")
                if pwdInput == realPwd:
                    print("Login Successful!")
                    
                    return True
                else:
                    counter +=1
        else:
            counter+=1
    else:
        return False
    
#function to create username and password with specification
def newUser(loginDict:Dict):
    print("Create a new user below")
    usernameInput = input("Please create your username: ")
    #check for unique username and prompt reenter if not unique
    while(usernameInput==loginDict.keys()):
        usernameInput = input("Username already existed.\nPlease create your username: ")
    else:
        pwdInput = input("Please create your password: ")
        #while the pwdChecker return False meaning password doesn't meet requirement, the loop is True and will continue to run until requirement is met 
        #so pwdChecker return True and "not True" = False will terminate the loop
        while not(pwdChecker(pwdInput)):
            pwdInput = input("Password complexity requirement not met. Length of at least 8, 1 lowercase, 1 uppercase, 1 digit, and 1 special character\nPlease create your password: ")
        else:
            print("Account Creation successful!")
            loginDict.update({usernameInput:pwdInput})   
    return usernameInput
#function to update password
def updatePwd(loginDict:Dict):
    print("Update your password below. Please log in first")
    if authenticate(loginDict) == True:
        pwdInput = input("Please update your password: ")
        #while the pwdChecker return False meaning password doesn't meet requirement, the loop is True and will continue to run until requirement is met 
        #so pwdChecker return True and "not True" = False will terminate the loop
        while not(pwdChecker(pwdInput)):
            pwdInput = input("Password complexity requirement not met. Length of at least 8, 1 lowercase, 1 uppercase, 1 digit, and 1 special character\nPlease update your password: ")
        else:
            print("Password Update Successful for User",usernameInput)
            loginDict.update({usernameInput:pwdInput})
            return True
    else:
        return False


def main():
    #initialize user and password list
    userList = ['lyang', 'kSimon', 'danny', 'tomatcpp', 'csDept', 'CoScpp', 'broncoWins', 'ponyExp','BldgAndRooms', 'helloKitty' ]
    pwdList = ['sheCodes#123', 'catchAllGood1%', '@my2Choices', '123abc;;;', 'Hello2Monday$','GoodFriday@Cpp2', 'CS2520@Python', 'JavaIsHot2!', '2ManyRainingDays!', '1Startup@Starbucks']
    #zip the 2 list and cast it to be a Dictionary type
    loginDict = dict(zip(userList,pwdList))
    '''for items in loginDict.items():
        print(items[0],":",items[1])'''
        
    #prompt user login & print corresponding status update
    if authenticate(loginDict) == True:
        pass
    else:
        print("Login Unsuccessful!")
    
    #create a new user, if account creation is successful, it will return the username. We'll check if the username is in the dictionary, if it is, welcome the user
    newUsername = newUser(loginDict)
    if(newUsername in loginDict.keys()):
        print("Welcome",newUsername+"!")
    #update password
    if updatePwd(loginDict) == False:
        print("Password update unsuccessful. End of program!")
#execute main function
main()
'''Output
Test(1) - Successful login, create account, and update password
Log in below
Please enter your username: iwant
Please enter your username: youtube
Please enter your username: helloKitty
Please enter your password: 1Startup@sdlfaksdjf
Please enter your password: 1Startup@Starbucks
Login Successful!
Create a new user below      
Please create your username: Analys
Please create your password: opening
Password complexity requirement not met. Length of at least 8, 1 lowercase, 1 uppercase, 1 digit, and 1 special character
Please create your password: Urthebest263
Password complexity requirement not met. Length of at least 8, 1 lowercase, 1 uppercase, 1 digit, and 1 special character
Please create your password: Getthebag78@
Account Creation successful!
Welcome Analys!
Update your password below. Please log in first
Log in below
Please enter your username: tomatcpp
Please enter your password: John
Please enter your password: 123abc;;;
Login Successful!
Please update your password: 4Begone123!
Password Update Successful for User tomatcpp
Test(2) - Unsuccessful login, succesful create account, unsuccessful password update
Log in below
Please enter your username: Analys
Please enter your username: ponyExp
Please enter your password: Johnl
Please enter your password: I can't take it
Please enter your password: python
Login Unsuccessful!
Create a new user below
Please create your username: user
Please create your password: user
Password complexity requirement not met. Length of at least 8, 1 lowercase, 1 uppercase, 1 digit, and 1 special character
Please create your password: I want to be 11
Password complexity requirement not met. Length of at least 8, 1 lowercase, 1 uppercase, 1 digit, and 1 special character
Please create your password: Python2520!
Account Creation successful!
Welcome user!
Update your password below. Please log in first
Log in below
Please enter your username: Ucla
Please enter your username: Cpp
Please enter your username: Get me a 
Password update unsuccessful. End of program!
'''
#Project 3 Task 2
'''Assumptions: \xa0 is part of the unicode encoding and must be removed by normalizing.
Â, hyphens, or periods, among others are non-words so must be removed. Words like general-purpose or high-level is a word when the hyphen is removed'''
import matplotlib.pyplot as plt
import matplotlib as mpl
from wordcloud import WordCloud,STOPWORDS,ImageColorGenerator
from typing import List
from PIL import Image

def getFile():
    #try to open the file, raise filenotfound exception if file can't be found
    while True:
        try:
            file = input("Please enter file name: ")
            #open file
            newfile = open(file,"r",encoding='utf-8-sig')
            #read file
            fileData = newfile.read() 
            #normalizing the string according to unicode to remove \xa0 from string
            #fileData = unicodedata.normalize("NFKD", fileData)
            #remove Â and ï»¿from file data
            #fileData = fileData.replace(u"Â", "")
            #fileData = fileData.replace(u"ï»¿M", "M")
            #print(fileData)
            #lowercase all letters
            fileData = fileData.lower()
            #remove non-words & punctuation
            for char in fileData:
                if ((ord(char)>=97 and ord(char)<=122) or ord(char)==10 or ord(char)==32):
                    pass
                else:
                    fileData = fileData.replace(char,' ')
            #count words 
            wordList = fileData.split()
            wordCount = len(wordList)

            #split each lines
            fileLine = fileData.splitlines()
            #print(fileLine)
            #close file
            newfile.close()
        #execute when error is found
        except FileNotFoundError:
            print("File not found. Try again!")
            continue
        #execute only when no exception happened
        else:
            if len(fileLine) >1 or len(fileLine)==0:
                print("There are",len(fileLine),"lines in",file)
            else:
                print("There is",len(fileLine),"line in",file)
            if wordCount >1 or wordCount==0:
                print("There are",wordCount,"words in",file)
            else:
                print("There is",wordCount,"word in",file)
            return fileLine
def fileContent(file):
    newFile = open(file,"r",encoding="utf-8-sig")
    data = newFile.read()
    newFile.close()
    return data
#function to create sets
def createSet(textList : List):
    newSet = set()
    #for each line, split it based on space, and add the words to the set 
    for line in textList:
        wordList = line.split()
        #print(wordList)
        #remove empty string element
        #line = [i for i in line if i]
        for word in wordList: 
            newSet.add(word)
        '''#check for multiple words on a line
        if len(line)>1:
            for word in line:
                newSet.add(word)
        #if only 1 word on the line, just add it to the set
        else:
            newSet.add(line)'''
    #print(newSet)
    
    return newSet
#pass 2 lists into the function, 
def wordFrequency(list1, list2):
    wordDict = {}
    #for each line, split the line into words, count them in list1 and list2
    #then update the dictionary
    for line in list1:
        wordList = line.split()
        for word in wordList:
            if word in wordDict:
                wordDict[word] +=1
            else:
                wordDict[word] =1
    #perform same function for list 2
    for line in list2:
        wordList = line.split()
        for word in wordList:
            if word in wordDict:
                wordDict[word] +=1
            else:
                wordDict[word] =1
    #sort by most frequent to least frequency
    wordDict = dict(sorted(wordDict.items(),key=lambda item: -item[1]))
    return wordDict
#function to create word cloud
def wordcloud(dictionary):
    stopW = set(STOPWORDS)
    wordcloud = WordCloud(min_word_length=4,background_color='white',collocation_threshold=3)
    #generate word cloud from dictionar
    wordcloud.generate_from_frequencies(dictionary)
    #plot word cloud
    plt.imshow(wordcloud,interpolation='bilinear')
    plt.axis('off')
    plt.show()
  
def main():
    #get the first file
    list1 = getFile()
    #get the second file
    list2 = getFile()
    #create set of words for first list
    set1 = createSet(list1)
    #create set of words for second list 
    set2 = createSet(list2)
    #to find total words used in two articles is same as union
    global totalWord
    totalWord = set1|set2
    print("\n")
    print(len(totalWord),"distinct words used in two articles. They are")
    for word in totalWord:
        print(word,end=', ')
    #words in article 1 but not in article 2
    diff1 = set1-set2
    print("\n")
    print(len(diff1),"words are in article 1 but not in article 2. They are")
    for word in diff1:
        print(word,end=', ')
    #words in article 2 but not in article 1
    diff2 = set2-set1
    print("\n")
    print(len(diff2),"words are in article 2 but not in article 1. They are")
    for word in diff2:
        print(word,end=', ')
    #words in both articles
    intersect = set1&set2
    print("\n")
    print(len(intersect),"words are in both article 1 and article 2. They are")
    for word in intersect:
        print(word,end=', ')
    #XOR or union of differences
    xOR = set1^set2
    print("\n")
    print(len(xOR),"words are not repeated article 1 and article 2. They are")
    for word in xOR:
        print(word,end=', ')
    #get word frequency
    print("\n")
    print("Word Frequency List") 
    wordDict = wordFrequency(list1,list2)
    for items in wordDict.items():
        print(items[0],":",items[1])
    #generate word cloud
    wordcloud(wordDict)
main()
'''Output:
Test(1)
Please enter file name: python.txt                                                                There are 2 lines in python.txt
There are 78 words in python.txt
Please enter file name: machinelearning.txt
There is 1 line in machinelearning.txt
There are 50 words in machinelearning.txt


77 distinct words used in two articles. They are
by, language, field, world, learn, philosophy, to, scikit, necessary, experiences, improve, from, create, get, general, learning, uses, learns, techniques, step, past, that, readability, direction, studying, steps, into, machine, level, application, statistics, using, python, and, predict, perform, the, programs, science, making, how, ready, programming, languages, design, most, high, purpose, tasks, give, specific, artificial, they, analyses, one, statistical, outcome, will, ranks, you, successful, as, dive, is, program, data, computer, consistently, emphasizes, intelligence, with, a, ability, library, code, popular, of,

44 words are in article 1 but not in article 2. They are
how, language, programming, languages, field, design, most, high, purpose, philosophy, tasks, give, scikit, necessary, experiences, improve, specific, create, general, they, uses, one, statistical, techniques, will, past, ranks, you, readability, successful, as, steps, level, application, consistently, emphasizes, with, perform, ability, programs, code, science, library, popular,

20 words are in article 2 but not in article 1. They are
ready, by, world, get, artificial, analyses, learns, outcome, step, direction, studying, dive, into, statistics, using, program, data, intelligence, predict, making,

13 words are in both article 1 and article 2. They are
python, from, that, computer, and, learn, learning, the, a, machine, is, to, of,

64 words are not repeated article 1 and article 2. They are
ready, how, by, language, programming, languages, field, world, design, most, high, purpose, philosophy, tasks, give, scikit, necessary, experiences, get, specific, improve, create, artificial, general, they, uses, analyses, learns, popular, one, statistical, outcome, techniques, step, will, past, ranks, direction, readability, you, studying, as, successful, steps, dive, into, level, application, statistics, using, program, data, consistently, intelligence, emphasizes, predict, with, perform, ability, programs, code, science, library, making,

Word Frequency List
the : 9
machine : 6
learning : 6
python : 5
is : 5
a : 5
of : 5
to : 5
learn : 4
and : 4
computer : 3
programming : 2
that : 2
from : 2
data : 2
into : 2
high : 1
level : 1
general : 1
purpose : 1
language : 1
design : 1
philosophy : 1
emphasizes : 1
code : 1
readability : 1
consistently : 1
ranks : 1
as : 1
one : 1
most : 1
popular : 1
languages : 1
field : 1
science : 1
uses : 1
statistical : 1
techniques : 1
give : 1
programs : 1
ability : 1
past : 1
experiences : 1
improve : 1
how : 1
they : 1
perform : 1
specific : 1
tasks : 1
you : 1
will : 1
steps : 1
necessary : 1
create : 1
successful : 1
application : 1
with : 1
scikit : 1
library : 1
making : 1
studying : 1
statistics : 1
step : 1
direction : 1
artificial : 1
intelligence : 1
program : 1
analyses : 1
learns : 1
predict : 1
outcome : 1
get : 1
ready : 1
dive : 1
world : 1
by : 1
using : 1

Test(2)
Please enter file name: java.txt  
There are 34 lines in java.txt
There are 453 words in java.txt
Please enter file name: cyber.txt
There are 32 lines in cyber.txt
There are 306 words in cyber.txt


367 distinct words used in two articles. They are
provides, tips, integrity, any, long, operations, hard, accelerate, better, networks, is, prevent, being, hospitals, netscape, identically, filtering, afford, reside, hardware, exist, securing, important, which, to, maintain, methods, top, isolation, int, classes, language, untrusted, will, first, cloud, automate, public, source, was, like, wary, use, integrations, contain, dns, problems, management, run, on, types, not, across, operating, key, understand, between, dependent, downloaded, what, features, most, predefined, operator, quite, while, functioning, technology, addition, principles, totally, individuals, network, people, attack, s, outside, interpreter, have, portability, protect, deal, binary, extremely, code, has, with, backing, system, does, unified, common, some, times, embedded, relies, cyberthreat, infrastructure, work, firewalls, also, world, programmers, vulnerabilities, connections, its, are, how, spread, attempted, class, running, of, users, an, y, cisco, keeping, today, ir, plants, new, can, native, investigate, who, needed, attachments, example, emerging, where, effective, object, multiple, developed, more, everything, into, pc, similar, style, especially, cannot, financial, identify, only, type, why, basic, programming, interpreted, essential, routers, guide, platforms, security, level, different, allow, such, strong, statements, regardless, purpose, advanced, machine, c, cyber, investigation, select, approach, remediation, structured, organization, based, because, java, keep, passwords, layers, nist, compared, explorer, respected, microsystems, researchers, defense, than, cumbersome, efficient, early, functions, protected, devices, cpu, critical, malware, erroneous, by, result, respond, main, framework, nearly, oriented, accessing, forces, detect, ft, set, smart, dynamic, permit, jvm, modify, change, loss, this, individual, computer, extortion, data, overloading, global, next, besides, mselves, languages, m, implemented, html, threats, whereas, solutions, anor, equivalents, connected, giving, application, compiled, power, protection, that, benefits, tools, comply, learn, photos, include, complement, lines, safer, primarily, identity, be, in, executable, products, malicious, implement, byte, up, makes, platform, everyone, as, attacks, simple, or, email, educate, create, small, safe, one, family, detection, originally, virtual, gives, team, within, used, choosing, software, programs, although, definitions, antivirus, three, advantages, for, recover, highly, typically, reveal, explains, viruses, much, function, drive, though, threat, considered, allows, it, you, our, page, help, society, all, general, talos, restrictions, at, entities, correctly, and, fast, attempts, same, from, processes, about, computers, safely, must, strategies, successful, a, service, program, sun, caused, cyberdefense, portable, both, intends, internet, configuration, systems, communicator, cybersecurity, microsoft, applications, browsers, endpoint, well, importance, generation, open, applet, syntax, slower, applets, usually, strengn, designed, web, but, organizations, runs, little, se, companies, downtime,

174 words are in article 1 but not in article 2. They are
provides, integrity, based, because, any, java, long, hard, better, compared, is, prevent, netscape, explorer, identically, microsystems, afford, than, reside, hardware, exist, cumbersome, efficient, early, which, cpu, maintain, methods, erroneous, by, isolation, int, classes, language, untrusted, will, first, nearly, oriented, was, accessing, forces, use, set, contain, dynamic, permit, jvm, modify, problems, change, run, types, this, not, operating, overloading, global, besides, between, languages, dependent, downloaded, implemented, html, m, features, whereas, most, equivalents, application, compiled, predefined, operator, quite, while, addition, lines, totally, primarily, network, executable, outside, malicious, interpreter, portability, implement, byte, binary, extremely, code, platform, as, simple, does, some, times, small, embedded, originally, virtual, gives, programmers, within, connections, although, definitions, its, are, class, advantages, running, highly, typically, viruses, much, function, drive, though, considered, allows, native, page, help, example, where, object, general, developed, into, pc, similar, style, restrictions, especially, cannot, correctly, only, fast, type, same, programming, safely, interpreted, program, sun, caused, portable, platforms, configuration, communicator, different, microsoft, allow, such, applications, statements, regardless, purpose, browsers, applet, syntax, slower, applets, machine, usually, c, designed, web, but, runs, little, structured, downtime,

153 words are in article 2 but not in article 1. They are
tips, passwords, keep, operations, layers, accelerate, nist, networks, being, hospitals, respected, researchers, filtering, defense, securing, protected, devices, critical, malware, top, result, respond, main, cloud, framework, automate, public, like, detect, wary, integrations, ft, smart, dns, management, loss, individual, extortion, across, next, understand, mselves, what, threats, solutions, connected, giving, power, protection, benefits, tools, comply, functioning, technology, photos, include, principles, complement, safer, individuals, people, attack, identity, products, have, up, deal, makes, everyone, attacks, backing, email, educate, common, create, unified, relies, cyberthreat, infrastructure, work, safe, one, firewalls, family, detection, world, team, choosing, vulnerabilities, how, spread, attempted, antivirus, three, recover, users, y, reveal, explains, cisco, keeping, today, ir, plants, new, threat, investigate, who, our, needed, attachments, emerging, society, effective, talos, everything, entities, identify, financial, and, attempts, why, processes, about, computers, strategies, successful, essential, service, routers, guide, cyberdefense, intends, level, systems, cybersecurity, strong, endpoint, well, importance, generation, open, advanced, cyber, strengn, investigation, select, approach, organizations, remediation, learn, organization, companies, 

40 words are in both article 1 and article 2. They are
key, at, or, also, from, basic, used, software, all, must, anor, programs, a, that, important, multiple, both, functions, to, internet, for, of, security, an, source, be, s, can, in, it, you, protect, has, on, with, computer, system, more, se, data,

327 words are not repeated article 1 and article 2. They are
provides, any, long, hard, accelerate, better, hospitals, identically, filtering, reside, hardware, securing, which, top, isolation, language, untrusted, cloud, automate, public, like, wary, integrations, use, contain, dns, problems, run, types, operating, understand, between, what, predefined, operator, functioning, technology, totally, attack, outside, portability, deal, binary, code, unified, common, some, times, embedded, relies, firewalls, programmers, vulnerabilities, are, how, spread, attempted, class, running, y, keeping, today, new, investigate, needed, attachments, example, developed, into, pc, similar, style, financial, type, why, guide, level, different, allow, such, statements, advanced, c, investigation, remediation, structured, based, because, keep, layers, nist, compared, explorer, researchers, defense, cumbersome, early, protected, devices, cpu, critical, malware, erroneous, main, accessing, detect, dynamic, permit, jvm, change, this, individual, extortion, next, global, languages, html, whereas, solutions, equivalents, power, application, protection, benefits, complement, executable, products, malicious, up, makes, platform, as, simple, email, create, small, gives, definitions, antivirus, three, reveal, typically, explains, viruses, much, drive, though, considered, allows, help, restrictions, and, correctly, fast, processes, same, about, computers, strategies, successful, cyberdefense, portable, intends, communicator, cybersecurity, endpoint, well, applet, usually, designed, web, but, organizations, runs, learn, safe, downtime, tips, integrity, operations, networks, being, is, prevent, netscape, afford, exist, maintain, methods, int, classes, will, first, was, management, not, across, dependent, downloaded, features, most, quite, while, addition, principles, individuals, network, people, interpreter, have, extremely, backing, does, cyberthreat, infrastructure, work, world, connections, its, users, cisco, ir, plants, native, who, emerging, where, effective, object, everything, especially, cannot, identify, only, programming, essential, interpreted, routers, platforms, strong, regardless, purpose, cyber, machine, select, approach, organization, passwords, java, respected, microsystems, than, efficient, by, result, respond, framework, nearly, oriented, forces, ft, set, smart, modify, loss, overloading, besides, mselves, m, implemented, threats, connected, giving, compiled, tools, comply, photos, include, lines, safer, primarily, identity, implement, byte, everyone, attacks, educate, one, family, detection, originally, virtual, team, within, choosing, although, advantages, recover, highly, function, threat, our, page, society, talos, general, entities, attempts, safely, service, program, sun, caused, systems, configuration, microsoft, applications, browsers, importance, generation, open, syntax, slower, applets, strengn, little, companies,

Word Frequency List
java : 26
a : 21
of : 17
to : 16
in : 11
from : 10
c : 10
security : 9
code : 9
it : 8
or : 8
as : 8
can : 8
an : 7
data : 7
cybersecurity : 7
language : 6
s : 6
for : 6
on : 6
programs : 6
running : 5
se : 5
must : 5
cyber : 5
attacks : 5
like : 5
internet : 4
run : 4
features : 4
protect : 4
program : 4
not : 4
you : 4
that : 4
be : 4
compiled : 4
byte : 4
this : 4
jvm : 4
software : 4
all : 4
with : 4
technology : 4
everyone : 4
and : 4
used : 3
applications : 3
network : 3
portable : 3
object : 3
oriented : 3
any : 3
computer : 3
has : 3
interpreter : 3
anor : 3
its : 3
pc : 3
but : 3
also : 3
such : 3
because : 3
types : 3
virtual : 3
machine : 3
allows : 3
more : 3
are : 3
does : 3
while : 3
whereas : 3
important : 3
basic : 3
at : 3
about : 3
successful : 3
one : 3
organizations : 3
framework : 3
was : 2
by : 2
based : 2
efficient : 2
embedded : 2
multiple : 2
interpreted : 2
will : 2
regardless : 2
hardware : 2
system : 2
portability : 2
key : 2
which : 2
safely : 2
applet : 2
applets : 2
small : 2
within : 2
both : 2
source : 2
runs : 2
addition : 2
cannot : 2
platform : 2
functions : 2
methods : 2
reside : 2
class : 2
outside : 2
protection : 2
across : 2
computers : 2
networks : 2
people : 2
processes : 2
threat : 2
principles : 2
email : 2
learn : 2
how : 2
y : 2
threats : 2
essential : 2
tools : 2
entities : 2
devices : 2
benefits : 2
attack : 2
work : 2
researchers : 2
new : 2
programming : 1
developed : 1
sun : 1
microsystems : 1
early : 1
although : 1
primarily : 1
simple : 1
general : 1
purpose : 1
originally : 1
designed : 1
platforms : 1
extremely : 1
same : 1
application : 1
identically : 1
operating : 1
long : 1
besides : 1
advantages : 1
is : 1
set : 1
only : 1
problems : 1
caused : 1
erroneous : 1
malicious : 1
viruses : 1
downloaded : 1
prevent : 1
accessing : 1
hard : 1
drive : 1
connections : 1
typically : 1
html : 1
page : 1
considered : 1
first : 1
into : 1
binary : 1
usually : 1
use : 1
nearly : 1
fast : 1
cpu : 1
native : 1
gives : 1
correctly : 1
implemented : 1
configuration : 1
most : 1
web : 1
browsers : 1
microsoft : 1
explorer : 1
netscape : 1
communicator : 1
contain : 1
compared : 1
little : 1
slower : 1
much : 1
better : 1
provides : 1
isolation : 1
between : 1
untrusted : 1
syntax : 1
similar : 1
languages : 1
quite : 1
different : 1
example : 1
permit : 1
programmers : 1
implement : 1
operator : 1
overloading : 1
dynamic : 1
where : 1
modify : 1
allow : 1
especially : 1
afford : 1
downtime : 1
predefined : 1
dependent : 1
some : 1
change : 1
int : 1
type : 1
highly : 1
structured : 1
than : 1
equivalents : 1
executable : 1
statements : 1
function : 1
definitions : 1
lines : 1
exist : 1
classes : 1
style : 1
global : 1
restrictions : 1
though : 1
cumbersome : 1
times : 1
help : 1
maintain : 1
integrity : 1
forces : 1
m : 1
totally : 1
what : 1
approach : 1
layers : 1
spread : 1
intends : 1
keep : 1
safe : 1
organization : 1
complement : 1
create : 1
effective : 1
defense : 1
unified : 1
management : 1
automate : 1
integrations : 1
select : 1
cisco : 1
products : 1
accelerate : 1
operations : 1
detection : 1
investigation : 1
remediation : 1
users : 1
understand : 1
comply : 1
choosing : 1
strong : 1
passwords : 1
being : 1
wary : 1
attachments : 1
backing : 1
up : 1
top : 1
tips : 1
have : 1
deal : 1
attempted : 1
well : 1
respected : 1
guide : 1
explains : 1
identify : 1
systems : 1
detect : 1
respond : 1
recover : 1
nist : 1
giving : 1
individuals : 1
needed : 1
mselves : 1
three : 1
main : 1
protected : 1
endpoint : 1
smart : 1
routers : 1
cloud : 1
common : 1
include : 1
next : 1
generation : 1
firewalls : 1
dns : 1
filtering : 1
malware : 1
antivirus : 1
solutions : 1
why : 1
today : 1
connected : 1
world : 1
advanced : 1
cyberdefense : 1
individual : 1
level : 1
result : 1
everything : 1
identity : 1
ft : 1
extortion : 1
attempts : 1
loss : 1
family : 1
photos : 1
relies : 1
critical : 1
infrastructure : 1
power : 1
plants : 1
hospitals : 1
financial : 1
service : 1
companies : 1
securing : 1
keeping : 1
our : 1
society : 1
functioning : 1
cyberthreat : 1
team : 1
talos : 1
who : 1
investigate : 1
emerging : 1
strategies : 1
reveal : 1
vulnerabilities : 1
educate : 1
public : 1
importance : 1
strengn : 1
open : 1
ir : 1
makes : 1
safer : 1
'''
