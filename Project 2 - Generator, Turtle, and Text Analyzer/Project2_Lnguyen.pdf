#Name: Loc Nguyen
#Project 2 Task 1
'''Objective: Text analyzer & modifier using functions
(1) Complete the get_num_of_characters() function, which takes a string as parameter and returns the number of 
characters in the user's string. We encourage you to use a for loop in this function.   
(2) Implement the output_without_whitespace() function. output_without_whitespace() takes a string as 
parameter and returns the string's characters except for whitespace (spaces, tabs). Note: a tab is '\t'. 
(3) Write a function get_safe() that takes a string as parameter and encrypts it using an encryption method of 
your choice. It returns the encrypted message.
(4) Write a function go_recover() that takes a string as parameter and decrypts it (according to the encryption 
method you used above). It returns the decrypted message. 
(5) Create a main() function that first prompts the user to enter a sentence of their choice, print out the string, 
the calls functions in (1) to (4) respectively, printing out the result after each function call.
(6) call the main function to test run the program. You must run the test case provided plus additional two 
different test runs. Note: a call to main function is a must.'''
import time
def get_num_of_characters(inputStr):
    lengthOfStr = 0
    for char in inputStr:
        lengthOfStr+=1
    return lengthOfStr

def output_without_whitespace(inputStr):
    #lengthOfStrNoSpace = len(inputStr) - inputStr.count(' ')
    StrNoSpace=inputStr.replace(" ","")
    print("String with no whitespace is",StrNoSpace)
    lengthOfStrNoSpace=get_num_of_characters(StrNoSpace)
    return lengthOfStrNoSpace

def vignereEncrypt ():
    #get desired key and plaintext
    key=input("Please enter the encryption key: ")
    plaintext=input("Please enter the plaintext: ")
    #lowercase all key and plaintext
    plaintext=plaintext.lower()
    key=key.lower()
    #remove whitespace
    plaintext=plaintext.replace(' ','')
    #get length of key and initialize empty string to store ciphertext
    keyLength=len(key)
    cipherText=''
    #loop through the length of plaintext char by char and use mod 
    #to find proper index of key char to encrypt with
    for i in range(len(plaintext)):
        letter = plaintext[i]
        k = key[i % keyLength]
        cipherText = cipherText + chr(((ord(letter) - 97) + (ord(k)-97)) % 26 + 97)
    print("Encrypted text is:",cipherText)
    return cipherText,key

def go_recover():
    ciphertext,key=vignereEncrypt()
    keyLength=len(key)
    plaintext=''

    for i in range(len(ciphertext)):
        letter=ciphertext[i]
        k = key[i % keyLength]
        plaintext = plaintext + chr(((ord(letter)-97) - (ord(k)-97)) %26 + 97)
    print("Plaintext is:",plaintext)
    return plaintext

def main():
    inputStr = input("Enter a string: ")
    print("You entered",inputStr)
    print("Number of characters:",get_num_of_characters(inputStr))
    print("Number of characters:",output_without_whitespace(inputStr))
    go_recover()
     

main()
'''Output
Test(1)
Enter a string: The only thing we have to fear is fear itself
You entered The only thing we have to fear is fear itself
Number of characters: 45
String with no whitespace is Theonlythingwehavetofearisfearitself
Number of characters: 36
Please enter the encryption key: Megafear is contagious
Please enter the plaintext: The only thing we have to fear is fear itself
Encrypted text is: flkospykuqftysutvkbczwmvoskiaivbkrnt
Plaintext is: theonlythingwehavetofearisfearitself
Test(2)
Enter a string: How many times you fail matter more than how much you succeed
You entered How many times you fail matter more than how much you succeed
Number of characters: 61
String with no whitespace is Howmanytimesyoufailmattermorethanhowmuchyousucceed    
Number of characters: 50
Please enter the encryption key: Python
Please enter the plaintext: Data Science is important   
Encrypted text is: symhgpxcgjsvhgfwceiyga
Plaintext is: datascienceisimportant
Test(3)
Enter a string: John is hungry
You entered John is hungry
Number of characters: 14
String with no whitespace is Johnishungry
Number of characters: 12
Please enter the encryption key: Hello World
Please enter the plaintext: John is not hungry
Encrypted text is: qssywfjcksxukcj
Plaintext is: johnisnothungry'''

#Project 2 Task 2   

#Biggest possible factor is half the number, start with that number
#Then, decrease by 1 until count is 1
start = time.time()
def isPrime(num):
    count = num//2
    while count > 1:
        if num%count==0:
            break
        count-=1
    else:
        return num

def primeGenerator():
    #start with 1st prime number
    n = 2
    #if prime, execution temporarily halt until called
    #if called again, increment by 1 to check and find the next prime num
    #tempt. halt again 
    while True:
        if isPrime(n):
            yield(n)
        n+=1
#print first 50 prime numbers, skip 50, print 101st prime num
#skip, print 1100th prime num
def main():
    gen = primeGenerator()
    print("The first 50 prime numbers are")
    for i in range(1101):
        if i<50:
            print(next(gen))
        elif 51<i<=100:
            next(gen)
        elif i==101:
            print("The 101st prime number is",next(gen))
        elif 101<i<1100:
            next(gen)
        elif i==1100:
            print("The 1100th prime number is",next(gen))
main()
end = time.time()
#output execution time
print("The time of execution is",(end-start),"seconds")
'''Output
The first 50 prime numbers are
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
179
181
191
193
197
199
211
223
227
229
The 101st prime number is 547
The 1100th prime number is 8831
The time of execution is 0.729851484298706 seconds'''

import turtle

#set up turtle
pen = turtle.Turtle()
pen.hideturtle()
pen.speed(0)
pen.color("black")

#setup screen
screen = turtle.Screen()
screen.title("Zipcode Visualization")
screen.screensize(800,500,bg="white")
#turtle var
distance=10
angle=90
longBar = 50
shortBar = 25
#change starting coordinate
pen.pu()
pen.left(angle*2)
pen.forward(distance*30)
pen.right(angle*2)

#find the sum of digit by modulus. Ensure num is an int by casting
def getSum(num):
    sum = 0
    while (num != 0):
        sum =sum + int(num % 10)
        num = int(num/10)
    return sum
#convert digit into code
def conversion(num):
    match num:
        case 0:
            code='11000'
        case 1:
            code='00011'
        case 2:
            code='00101'
        case 3:
            code='00110'
        case 4:
            code='01001'
        case 5:
            code='01010'
        case 6:
            code='01100'
        case 7:
            code='10001'
        case 8:
            code='10010'
        case 9:
            code='10100'
    return code
def draw(code):
    if code =='1':
        #draw longbar
        pen.pd()
        pen.left(angle)
        pen.forward(longBar)
        pen.pu()
        #reposition pen for next run
        pen.right(angle)
        pen.forward(distance)
        pen.right(angle)
        pen.forward(longBar)
        pen.left(angle)
    else:
        #draw shortbard
        pen.pd()
        pen.left(angle)
        pen.forward(shortBar)
        pen.pu()
        #reposition pen for next run
        pen.right(angle)
        pen.forward(distance)
        pen.right(angle)
        pen.forward(shortBar)
        pen.left(angle)
        
            
#get zipcode and replace hyphen
zipCode = input("Enter your zip code (in ZIP+4 format): ")
if len(zipCode)!=10:
    exit("Invalid zipcode")
zipCode=zipCode.replace('-','')
#cast zipcode to int
intZipCode=int(zipCode)
#get the total of digits
total=getSum(intZipCode)
#find checkSum digit
checkSumDigit=10 - (total%10)
#append checkSum digit to zipcode and store in modCode
modCode=str(zipCode)+str(checkSumDigit)

print("Modified zipcode:",modCode)

barCode=''
#convert value to binary and match case to ever
for index in modCode:
    digitBarcode=conversion(int(index))
    barCode=barCode + digitBarcode
print("Barcode for this zipcode:",barCode)
#draw start
draw('1')
#feed digit by digit into draw function to draw
for index in barCode:
    draw(index)
#draw stop
draw('1')
turtle.done()
'''Output
Test(1)
Enter your zip code (in ZIP+4 format): 55555-1237
Modified zipcode: 5555512372
Barcode for this zipcode: 01010010100101001010010100001100101001101000100101
Test(2)
Enter your zip code (in ZIP+4 format): 91768-1111
Modified zipcode: 9176811115
Barcode for this zipcode: 10100000111000101100100100001100011000110001101010
Test(3)
Enter your zip code (in ZIP+4 format): 928001-1212
Invalid zipcode
'''
